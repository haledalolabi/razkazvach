generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  EDITOR
  USER
}

enum StoryStatus {
  DRAFT
  PUBLISHED
}

model User {
  id            String   @id @default(cuid())
  name          String?
  email         String   @unique
  emailVerified DateTime?
  image         String?
  role          Role     @default(USER)
  accounts      Account[]
  sessions      Session[]
  readingProgress ReadingProgress[]
  events        Event[]
  experimentAssignments UserExperimentAssignment[]
}

model Account {
  id                String @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Story {
  id            String      @id @default(cuid())
  slug          String      @unique
  title         String
  description   String
  tags          String[]    @default([])
  ageMin        Int
  ageMax        Int
  isInteractive Boolean     @default(false)
  status        StoryStatus @default(DRAFT)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  publishedAt   DateTime?
  body          StoryBody?
  interactiveNodes InteractiveNode[]
  readingProgress ReadingProgress[]
  freeRotation   FreeRotation?
}

model StoryBody {
  storyId        String @id
  lang           String
  html           String
  readingTimeSec Int?
  story          Story  @relation(fields: [storyId], references: [id], onDelete: Cascade)
}

model InteractiveNode {
  id        String @id @default(cuid())
  storyId   String
  title     String
  bodyHtml  String
  story     Story   @relation(fields: [storyId], references: [id], onDelete: Cascade)
  choices   InteractiveChoice[] @relation("FromNode")
  incoming  InteractiveChoice[] @relation("ToNode")

  @@index([storyId])
}

model InteractiveChoice {
  id         String @id @default(cuid())
  fromNodeId String
  label      String
  toNodeId   String

  fromNode InteractiveNode @relation("FromNode", fields: [fromNodeId], references: [id], onDelete: Cascade)
  toNode   InteractiveNode @relation("ToNode", fields: [toNodeId], references: [id], onDelete: Cascade)

  @@index([fromNodeId])
  @@index([toNodeId])
}

model ReadingProgress {
  userId    String
  storyId   String
  lastPos   String
  updatedAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  story Story @relation(fields: [storyId], references: [id], onDelete: Cascade)

  @@id([userId, storyId])
}

model Event {
  id     String   @id @default(cuid())
  userId String?
  name   String
  props  Json
  ts     DateTime @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([name, ts])
}

model ExperimentConfig {
  key       String @id
  variants  Json
  updatedAt DateTime @updatedAt
}

model UserExperimentAssignment {
  userId  String
  key     String
  variant String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, key])
}

model FreeRotation {
  id       String @id @default(cuid())
  storyId  String @unique
  monthKey String
  priority Int    @default(0)
  story    Story  @relation(fields: [storyId], references: [id], onDelete: Cascade)
}

